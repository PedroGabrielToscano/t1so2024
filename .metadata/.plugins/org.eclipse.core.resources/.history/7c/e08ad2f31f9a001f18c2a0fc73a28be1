package projeto;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

class Produtor implements Runnable {
    private final BlockingQueue<Integer> fila;
    private final int velocidade;
    private final JLabel statusLabel;

    public Produtor(BlockingQueue<Integer> fila, int velocidade, JLabel statusLabel) {
        this.fila = fila;
        this.velocidade = velocidade;
        this.statusLabel = statusLabel;
    }

    public void run() {
        int valor = 0;
        try {
            while (!Thread.currentThread().isInterrupted()) {
                Thread.sleep(velocidade);
                fila.put(valor); // Bloqueia se a fila estiver cheia
                statusLabel.setText("Produziu: " + valor);
                valor++;
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}

class Consumidor implements Runnable {
    private final BlockingQueue<Integer> fila;
    private final int velocidade;
    private final JLabel statusLabel;

    public Consumidor(BlockingQueue<Integer> fila, int velocidade, JLabel statusLabel) {
        this.fila = fila;
        this.velocidade = velocidade;
        this.statusLabel = statusLabel;
    }

    public void run() {
        try {
            while (!Thread.currentThread().isInterrupted()) {
                Thread.sleep(velocidade);
                int valor = fila.take(); // Bloqueia se a fila estiver vazia
                statusLabel.setText("Consumiu: " + valor);
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}

public class ProdutorConsumidorGUIBlockingQueue extends JFrame {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Thread threadProdutor;
    private Thread threadConsumidor;
    private BlockingQueue<Integer> fila;
    private Timer timer;
    private final JProgressBar bufferProgressBar = new JProgressBar();
    private final JLabel produtorStatus = new JLabel("Produtor pronto");
    private final JLabel consumidorStatus = new JLabel("Consumidor pronto");

    public ProdutorConsumidorGUIBlockingQueue() {
        setTitle("Produtor-Consumidor com BlockingQueue");
        setSize(500, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        initComponents();
    }

    private void initComponents() {
        // Painel principal
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));

        // Painel de controle
        JPanel controlPanel = new JPanel(new GridLayout(4, 2, 10, 10));
        controlPanel.setBorder(BorderFactory.createTitledBorder("Configurações"));

        // Componentes para ajustar parâmetros
        JSlider velocidadeProdutorSlider = new JSlider(100, 2000, 1000);
        velocidadeProdutorSlider.setMajorTickSpacing(500);
        velocidadeProdutorSlider.setPaintTicks(true);
        velocidadeProdutorSlider.setPaintLabels(true);

        JSlider velocidadeConsumidorSlider = new JSlider(100, 2000, 1000);
        velocidadeConsumidorSlider.setMajorTickSpacing(500);
        velocidadeConsumidorSlider.setPaintTicks(true);
        velocidadeConsumidorSlider.setPaintLabels(true);

        JSpinner tamanhoFilaSpinner = new JSpinner(new SpinnerNumberModel(5, 1, 20, 1));

        // Labels
        JLabel velocidadeProdutorLabel = new JLabel("Velocidade Produtor (ms):");
        JLabel velocidadeConsumidorLabel = new JLabel("Velocidade Consumidor (ms):");
        JLabel tamanhoFilaLabel = new JLabel("Tamanho da Fila:");

        // Botões
        JButton iniciarButton = new JButton("Iniciar");
        JButton pararButton = new JButton("Parar");

        // Adiciona componentes ao painel de controle
        controlPanel.add(velocidadeProdutorLabel);
        controlPanel.add(velocidadeProdutorSlider);
        controlPanel.add(velocidadeConsumidorLabel);
        controlPanel.add(velocidadeConsumidorSlider);
        controlPanel.add(tamanhoFilaLabel);
        controlPanel.add(tamanhoFilaSpinner);
        controlPanel.add(iniciarButton);
        controlPanel.add(pararButton);

        // Painel de status
        JPanel statusPanel = new JPanel(new GridLayout(3, 1, 10, 10));
        statusPanel.setBorder(BorderFactory.createTitledBorder("Status"));

        // Configuração da barra de progresso
        bufferProgressBar.setMinimum(0);
        bufferProgressBar.setStringPainted(true);

        // Adiciona componentes ao painel de status
        statusPanel.add(new JLabel("Fila:"));
        statusPanel.add(bufferProgressBar);
        statusPanel.add(produtorStatus);
        statusPanel.add(consumidorStatus);

        // Adiciona painéis ao painel principal
        mainPanel.add(controlPanel, BorderLayout.NORTH);
        mainPanel.add(statusPanel, BorderLayout.CENTER);

        // Adiciona o painel principal ao frame
        add(mainPanel);

        // Ações dos botões
        iniciarButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int velocidadeProdutor = velocidadeProdutorSlider.getValue();
                int velocidadeConsumidor = velocidadeConsumidorSlider.getValue();
                int tamanhoFila = (int) tamanhoFilaSpinner.getValue();

                fila = new ArrayBlockingQueue<>(tamanhoFila);
                bufferProgressBar.setMaximum(tamanhoFila);

                threadProdutor = new Thread(new Produtor(fila, velocidadeProdutor, produtorStatus));
                threadConsumidor = new Thread(new Consumidor(fila, velocidadeConsumidor, consumidorStatus));

                threadProdutor.start();
                threadConsumidor.start();

                // Atualiza o status da fila periodicamente
                timer = new Timer(100, new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        if (fila != null) {
                            int tamanhoAtual = fila.size();
                            bufferProgressBar.setValue(tamanhoAtual);
                            bufferProgressBar.setString(tamanhoAtual + "/" + fila.remainingCapacity() + tamanhoAtual);
                        }
                    }
                });
                timer.start();

                iniciarButton.setEnabled(false);
                pararButton.setEnabled(true);
            }
        });

        pararButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (threadProdutor != null && threadConsumidor != null) {
                    threadProdutor.interrupt();
                    threadConsumidor.interrupt();
                    threadProdutor = null;
                    threadConsumidor = null;
                    fila = null;
                    bufferProgressBar.setValue(0);
                    bufferProgressBar.setString("0/0");
                    produtorStatus.setText("Produtor parado");
                    consumidorStatus.setText("Consumidor parado");
                    if (timer != null) {
                        timer.stop();
                    }
                    iniciarButton.setEnabled(true);
                    pararButton.setEnabled(false);
                }
            }
        });

        pararButton.setEnabled(false);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ProdutorConsumidorGUIBlockingQueue gui = new ProdutorConsumidorGUIBlockingQueue();
            gui.setVisible(true);
        });
    }
}
